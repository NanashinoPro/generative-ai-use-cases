import { TestCaseType } from '../@types/summit/interpreter';

export default {
  systemContext: (runtime: string) => {
    return `あなたはAWS Lambda関数を生成するAIアシスタントです。
以下の手順でLambda関数のコードを生成してください。手順以外のことは絶対にしないでください。

<Lambda関数の生成手順>
* ユーザがチャットで関数作成のコンテキストを与えるので、それに従ってください。ただし、<Lambda関数の生成手順></Lambda関数の生成手順>は厳守してください。例外はありません。
* ユーザがチャットで指示した<関数のコンテキスト></関数のコンテキスト>を理解してください。この内容を元にコードを生成します。ここに書かれていない処理は、絶対にコードとして生成してはいけません。例外はありません。
* Lambdaのランタイムは「${runtime}」を利用するので、ランタイムに合ったコードを生成してください。
* Lambda関数のハンドラーの名前は、必ず「handler」としてください。
* nodejsの場合は、必ずasyncな関数としてください。
* 関数の戻り値は、指定された通りのフォーマットにしてください。勝手にstatusCodeやbodyを設定しないでください。
* コードに対して解説を行いたい場合は、コード内のコメントブロックとして出力してください。
* 生成したコードだけを出力してください。その他の文言は一切出力しないでください。マークダウンでコードブロックを示す「\`\`\`」も一切不要です。「ありがとう」「すみません」などという雑談も一切不要です。例外はありません。
</Lambda関数の生成手順>
`;
  },
  generationContext: (context: string) => {
    return `<関数のコンテキスト>
${context}
</関数のコンテキスト>`;
  },
  fixError: (errorMessage: string) => {
    return `Lambda関数を実行したら以下のエラーが発生しました。
エラーの内容を元に適切にプログラムを修正してください。
<発生したエラー>
${errorMessage}
</発生したエラー>`;
  },
  generationTestData: () => {
    return `以下の手順でテストデータを生成してください。手順以外のことは絶対にしないでください。

<テストデータの生成手順>
* 先ほどあなたが生成したLambdaのコードに対するテストデータを生成します。これまでのやり取りをすべて理解してください。
* Lambda関数のコードをテストするのではなく、コードのあるべき姿をテストします。
* 不正な入力やエッジケースに関するテストケースも作成してください。
  * 例えば、関数の定義上、数値しか入力しない場合でも、文字列を入力するなどのケースです。
* <テストデータのフォーマット></テストデータのフォーマット>のJSON形式でテストデータを出力してください。データは必ず配列で設定してください。その他の文言は一切出力しないでください。例外はありません。
* JSON以外の文字列は一切出力しないでください。見出しや説明文は一切出力してはいけません。例外はありません。
</テストデータの生成手順>

<テストデータのフォーマット>
{
  describe: "テストデータの解説",
  input: "Lambda関数のINPUT",
  output: "Lambda関数のOUTPUT"
}[]
</テストデータのフォーマット>
`;
  },
  fixFaildedTest: (
    failedTests: (TestCaseType & { result: string | object })[]
  ) => {
    return `Lambda関数をテストしたところ、期待値通りに動作しませんでした。
<ソースコードの修正手順></ソースコードの修正手順>を元に、ソースコードを修正してください。
    
<ソースコードの修正手順>
* <修正指示></修正指示>を全て理解して、適切にコードを修正してください。
* 修正したコードだけを出力してください。その他の文言は一切出力しないでください。「ありがとう」「すみません」などという雑談も一切不要です。例外はありません。
</ソースコードの修正手順>

${failedTests.map((failedTest) => {
  return `<修正方針>
「${failedTest.describe}」というテストに合格するように修正してください。
「${JSON.stringify(failedTest.input)}」をINPUTしたら、「${JSON.stringify(failedTest.result)}」という結果となりましたが、「${JSON.stringify(failedTest.output)}」となるべきです。
</修正方針>
`;
})}
    `;
  },
};
